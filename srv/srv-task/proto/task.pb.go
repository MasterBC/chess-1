// Code generated by protoc-gen-go. DO NOT EDIT.
// source: task.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	task.proto

It has these top-level messages:
	GameInfoArgs
	TaskPlayerInfo
	TaskRes
	PlayerActionArgs
	UpsetTaskArgs
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type GameInfoArgs struct {
	RoomType  int32             `protobuf:"varint,1,opt,name=room_type,json=roomType" json:"room_type,omitempty"`
	MatchType int32             `protobuf:"varint,2,opt,name=match_type,json=matchType" json:"match_type,omitempty"`
	Winner    int32             `protobuf:"varint,3,opt,name=winner" json:"winner,omitempty"`
	Players   []*TaskPlayerInfo `protobuf:"bytes,4,rep,name=players" json:"players,omitempty"`
	Time      int32             `protobuf:"varint,5,opt,name=time" json:"time,omitempty"`
}

func (m *GameInfoArgs) Reset()                    { *m = GameInfoArgs{} }
func (m *GameInfoArgs) String() string            { return proto1.CompactTextString(m) }
func (*GameInfoArgs) ProtoMessage()               {}
func (*GameInfoArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GameInfoArgs) GetRoomType() int32 {
	if m != nil {
		return m.RoomType
	}
	return 0
}

func (m *GameInfoArgs) GetMatchType() int32 {
	if m != nil {
		return m.MatchType
	}
	return 0
}

func (m *GameInfoArgs) GetWinner() int32 {
	if m != nil {
		return m.Winner
	}
	return 0
}

func (m *GameInfoArgs) GetPlayers() []*TaskPlayerInfo {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *GameInfoArgs) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

// 玩家信息
type TaskPlayerInfo struct {
	Id        int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	HandLevel int32 `protobuf:"varint,2,opt,name=hand_level,json=handLevel" json:"hand_level,omitempty"`
	IsAllin   int32 `protobuf:"varint,3,opt,name=is_allin,json=isAllin" json:"is_allin,omitempty"`
	AllBet    int32 `protobuf:"varint,4,opt,name=all_bet,json=allBet" json:"all_bet,omitempty"`
}

func (m *TaskPlayerInfo) Reset()                    { *m = TaskPlayerInfo{} }
func (m *TaskPlayerInfo) String() string            { return proto1.CompactTextString(m) }
func (*TaskPlayerInfo) ProtoMessage()               {}
func (*TaskPlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TaskPlayerInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TaskPlayerInfo) GetHandLevel() int32 {
	if m != nil {
		return m.HandLevel
	}
	return 0
}

func (m *TaskPlayerInfo) GetIsAllin() int32 {
	if m != nil {
		return m.IsAllin
	}
	return 0
}

func (m *TaskPlayerInfo) GetAllBet() int32 {
	if m != nil {
		return m.AllBet
	}
	return 0
}

type TaskRes struct {
	Ret int32  `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	Msg string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *TaskRes) Reset()                    { *m = TaskRes{} }
func (m *TaskRes) String() string            { return proto1.CompactTextString(m) }
func (*TaskRes) ProtoMessage()               {}
func (*TaskRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TaskRes) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *TaskRes) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type PlayerActionArgs struct {
	RoomType  int32 `protobuf:"varint,1,opt,name=room_type,json=roomType" json:"room_type,omitempty"`
	MatchType int32 `protobuf:"varint,2,opt,name=match_type,json=matchType" json:"match_type,omitempty"`
	Id        int32 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Type      int32 `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
	Time      int32 `protobuf:"varint,5,opt,name=time" json:"time,omitempty"`
}

func (m *PlayerActionArgs) Reset()                    { *m = PlayerActionArgs{} }
func (m *PlayerActionArgs) String() string            { return proto1.CompactTextString(m) }
func (*PlayerActionArgs) ProtoMessage()               {}
func (*PlayerActionArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PlayerActionArgs) GetRoomType() int32 {
	if m != nil {
		return m.RoomType
	}
	return 0
}

func (m *PlayerActionArgs) GetMatchType() int32 {
	if m != nil {
		return m.MatchType
	}
	return 0
}

func (m *PlayerActionArgs) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PlayerActionArgs) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *PlayerActionArgs) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

type UpsetTaskArgs struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *UpsetTaskArgs) Reset()                    { *m = UpsetTaskArgs{} }
func (m *UpsetTaskArgs) String() string            { return proto1.CompactTextString(m) }
func (*UpsetTaskArgs) ProtoMessage()               {}
func (*UpsetTaskArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpsetTaskArgs) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto1.RegisterType((*GameInfoArgs)(nil), "proto.GameInfoArgs")
	proto1.RegisterType((*TaskPlayerInfo)(nil), "proto.TaskPlayerInfo")
	proto1.RegisterType((*TaskRes)(nil), "proto.TaskRes")
	proto1.RegisterType((*PlayerActionArgs)(nil), "proto.PlayerActionArgs")
	proto1.RegisterType((*UpsetTaskArgs)(nil), "proto.UpsetTaskArgs")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TaskService service

type TaskServiceClient interface {
	// 获取所有房间信息
	GameOver(ctx context.Context, in *GameInfoArgs, opts ...grpc.CallOption) (*TaskRes, error)
	// 更新房间信息
	PlayerEvent(ctx context.Context, in *PlayerActionArgs, opts ...grpc.CallOption) (*TaskRes, error)
	// 更新任务
	UpsetTask(ctx context.Context, in *UpsetTaskArgs, opts ...grpc.CallOption) (*TaskRes, error)
}

type taskServiceClient struct {
	cc *grpc.ClientConn
}

func NewTaskServiceClient(cc *grpc.ClientConn) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) GameOver(ctx context.Context, in *GameInfoArgs, opts ...grpc.CallOption) (*TaskRes, error) {
	out := new(TaskRes)
	err := grpc.Invoke(ctx, "/proto.TaskService/GameOver", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) PlayerEvent(ctx context.Context, in *PlayerActionArgs, opts ...grpc.CallOption) (*TaskRes, error) {
	out := new(TaskRes)
	err := grpc.Invoke(ctx, "/proto.TaskService/PlayerEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) UpsetTask(ctx context.Context, in *UpsetTaskArgs, opts ...grpc.CallOption) (*TaskRes, error) {
	out := new(TaskRes)
	err := grpc.Invoke(ctx, "/proto.TaskService/UpsetTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TaskService service

type TaskServiceServer interface {
	// 获取所有房间信息
	GameOver(context.Context, *GameInfoArgs) (*TaskRes, error)
	// 更新房间信息
	PlayerEvent(context.Context, *PlayerActionArgs) (*TaskRes, error)
	// 更新任务
	UpsetTask(context.Context, *UpsetTaskArgs) (*TaskRes, error)
}

func RegisterTaskServiceServer(s *grpc.Server, srv TaskServiceServer) {
	s.RegisterService(&_TaskService_serviceDesc, srv)
}

func _TaskService_GameOver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameInfoArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GameOver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskService/GameOver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GameOver(ctx, req.(*GameInfoArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_PlayerEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerActionArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).PlayerEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskService/PlayerEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).PlayerEvent(ctx, req.(*PlayerActionArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_UpsetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsetTaskArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).UpsetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskService/UpsetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).UpsetTask(ctx, req.(*UpsetTaskArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GameOver",
			Handler:    _TaskService_GameOver_Handler,
		},
		{
			MethodName: "PlayerEvent",
			Handler:    _TaskService_PlayerEvent_Handler,
		},
		{
			MethodName: "UpsetTask",
			Handler:    _TaskService_UpsetTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task.proto",
}

func init() { proto1.RegisterFile("task.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0xcf, 0x8e, 0xda, 0x30,
	0x10, 0xc6, 0x1b, 0x12, 0x08, 0x19, 0x5a, 0x84, 0xdc, 0x3f, 0xa4, 0xad, 0xaa, 0xa2, 0x9c, 0xb8,
	0x94, 0xaa, 0x70, 0xe9, 0x95, 0x4a, 0x55, 0x55, 0xa9, 0x52, 0xab, 0x94, 0x9e, 0x23, 0x03, 0x53,
	0xb0, 0x70, 0xfe, 0xc8, 0xb6, 0xb2, 0xe2, 0x05, 0xf6, 0x55, 0xf6, 0xb8, 0xaf, 0xb8, 0x1a, 0xc7,
	0x20, 0x60, 0xb9, 0xed, 0x29, 0xf6, 0xf7, 0x8d, 0x33, 0xbf, 0xf9, 0x6c, 0x00, 0xc3, 0xf5, 0x6e,
	0x52, 0xa9, 0xd2, 0x94, 0xac, 0x6d, 0x3f, 0xc9, 0x9d, 0x07, 0xcf, 0x7f, 0xf0, 0x1c, 0x7f, 0x16,
	0xff, 0xcb, 0xb9, 0xda, 0x68, 0xf6, 0x1e, 0x22, 0x55, 0x96, 0x79, 0x66, 0xf6, 0x15, 0xc6, 0xde,
	0xc8, 0x1b, 0xb7, 0xd3, 0x2e, 0x09, 0x8b, 0x7d, 0x85, 0xec, 0x03, 0x40, 0xce, 0xcd, 0x6a, 0xdb,
	0xb8, 0x2d, 0xeb, 0x46, 0x56, 0xb1, 0xf6, 0x1b, 0xe8, 0xdc, 0x88, 0xa2, 0x40, 0x15, 0xfb, 0xd6,
	0x72, 0x3b, 0xf6, 0x19, 0xc2, 0x4a, 0xf2, 0x3d, 0x2a, 0x1d, 0x07, 0x23, 0x7f, 0xdc, 0x9b, 0xbe,
	0x6e, 0x20, 0x26, 0x0b, 0xae, 0x77, 0x7f, 0xac, 0x43, 0xfd, 0xd3, 0x43, 0x15, 0x63, 0x10, 0x18,
	0x91, 0x63, 0xdc, 0xb6, 0xbf, 0xb1, 0xeb, 0x44, 0x43, 0xff, 0xbc, 0x9c, 0xf5, 0xa1, 0x25, 0xd6,
	0x8e, 0xb1, 0x25, 0xd6, 0x44, 0xb7, 0xe5, 0xc5, 0x3a, 0x93, 0x58, 0xa3, 0x3c, 0xd0, 0x91, 0xf2,
	0x8b, 0x04, 0xf6, 0x16, 0xba, 0x42, 0x67, 0x5c, 0x4a, 0x51, 0x38, 0xbe, 0x50, 0xe8, 0x39, 0x6d,
	0xd9, 0x10, 0x42, 0x2e, 0x65, 0xb6, 0x44, 0x13, 0x07, 0x0d, 0x39, 0x97, 0xf2, 0x1b, 0x9a, 0xe4,
	0x13, 0x84, 0xd4, 0x34, 0x45, 0xcd, 0x06, 0xe0, 0x2b, 0x34, 0xae, 0x1d, 0x2d, 0x49, 0xc9, 0xf5,
	0xc6, 0x36, 0x8a, 0x52, 0x5a, 0x26, 0xb7, 0x1e, 0x0c, 0x1a, 0xc0, 0xf9, 0xca, 0x88, 0xb2, 0x78,
	0x72, 0xa2, 0xcd, 0x88, 0xfe, 0x71, 0x44, 0x0a, 0x86, 0x0a, 0x03, 0x17, 0x0c, 0xd5, 0x5c, 0x0b,
	0xeb, 0x23, 0xbc, 0xf8, 0x57, 0x69, 0x34, 0x04, 0x6f, 0x21, 0x2e, 0xb2, 0x9a, 0xde, 0x7b, 0xd0,
	0x23, 0xf3, 0x2f, 0xaa, 0x5a, 0xac, 0x90, 0x7d, 0x81, 0x2e, 0x3d, 0x83, 0xdf, 0x35, 0x2a, 0xf6,
	0xd2, 0xdd, 0xce, 0xe9, 0xbb, 0x78, 0xd7, 0x3f, 0xb9, 0xb2, 0x14, 0x75, 0xf2, 0x8c, 0x7d, 0x85,
	0x5e, 0x33, 0xeb, 0xf7, 0x1a, 0x0b, 0xc3, 0x86, 0xae, 0xe0, 0x72, 0xfe, 0x2b, 0x27, 0x67, 0x10,
	0x1d, 0xe9, 0xd8, 0x2b, 0x67, 0x9f, 0xf1, 0x3e, 0x3e, 0xb4, 0xec, 0x58, 0x61, 0xf6, 0x10, 0x00,
	0x00, 0xff, 0xff, 0x29, 0x46, 0x14, 0x10, 0xc5, 0x02, 0x00, 0x00,
}
