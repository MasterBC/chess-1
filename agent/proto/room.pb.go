// Code generated by protoc-gen-go. DO NOT EDIT.
// source: room.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Room_FrameType int32

const (
	Room_Ping    Room_FrameType = 0
	Room_Message Room_FrameType = 1
	Room_Kick    Room_FrameType = 2
)

var Room_FrameType_name = map[int32]string{
	0: "Ping",
	1: "Message",
	2: "Kick",
}
var Room_FrameType_value = map[string]int32{
	"Ping":    0,
	"Message": 1,
	"Kick":    2,
}

func (x Room_FrameType) String() string {
	return proto1.EnumName(Room_FrameType_name, int32(x))
}
func (Room_FrameType) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{0, 0} }

type Room struct {
}

func (m *Room) Reset()                    { *m = Room{} }
func (m *Room) String() string            { return proto1.CompactTextString(m) }
func (*Room) ProtoMessage()               {}
func (*Room) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

type Room_Frame struct {
	Type    Room_FrameType `protobuf:"varint,1,opt,name=Type,enum=proto.Room_FrameType" json:"Type,omitempty"`
	Message []byte         `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *Room_Frame) Reset()                    { *m = Room_Frame{} }
func (m *Room_Frame) String() string            { return proto1.CompactTextString(m) }
func (*Room_Frame) ProtoMessage()               {}
func (*Room_Frame) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0, 0} }

func (m *Room_Frame) GetType() Room_FrameType {
	if m != nil {
		return m.Type
	}
	return Room_Ping
}

func (m *Room_Frame) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type RoomInfoArgs struct {
}

func (m *RoomInfoArgs) Reset()                    { *m = RoomInfoArgs{} }
func (m *RoomInfoArgs) String() string            { return proto1.CompactTextString(m) }
func (*RoomInfoArgs) ProtoMessage()               {}
func (*RoomInfoArgs) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

type RoomInfoRes struct {
}

func (m *RoomInfoRes) Reset()                    { *m = RoomInfoRes{} }
func (m *RoomInfoRes) String() string            { return proto1.CompactTextString(m) }
func (*RoomInfoRes) ProtoMessage()               {}
func (*RoomInfoRes) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func init() {
	proto1.RegisterType((*Room)(nil), "proto.Room")
	proto1.RegisterType((*Room_Frame)(nil), "proto.Room.Frame")
	proto1.RegisterType((*RoomInfoArgs)(nil), "proto.RoomInfoArgs")
	proto1.RegisterType((*RoomInfoRes)(nil), "proto.RoomInfoRes")
	proto1.RegisterEnum("proto.Room_FrameType", Room_FrameType_name, Room_FrameType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RoomService service

type RoomServiceClient interface {
	// 透传消息, 双向流
	Stream(ctx context.Context, opts ...grpc.CallOption) (RoomService_StreamClient, error)
	// 获取房间信息
	RoomInfo(ctx context.Context, in *RoomInfoArgs, opts ...grpc.CallOption) (*RoomInfoRes, error)
}

type roomServiceClient struct {
	cc *grpc.ClientConn
}

func NewRoomServiceClient(cc *grpc.ClientConn) RoomServiceClient {
	return &roomServiceClient{cc}
}

func (c *roomServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (RoomService_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RoomService_serviceDesc.Streams[0], c.cc, "/proto.RoomService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &roomServiceStreamClient{stream}
	return x, nil
}

type RoomService_StreamClient interface {
	Send(*Room_Frame) error
	Recv() (*Room_Frame, error)
	grpc.ClientStream
}

type roomServiceStreamClient struct {
	grpc.ClientStream
}

func (x *roomServiceStreamClient) Send(m *Room_Frame) error {
	return x.ClientStream.SendMsg(m)
}

func (x *roomServiceStreamClient) Recv() (*Room_Frame, error) {
	m := new(Room_Frame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *roomServiceClient) RoomInfo(ctx context.Context, in *RoomInfoArgs, opts ...grpc.CallOption) (*RoomInfoRes, error) {
	out := new(RoomInfoRes)
	err := grpc.Invoke(ctx, "/proto.RoomService/RoomInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoomService service

type RoomServiceServer interface {
	// 透传消息, 双向流
	Stream(RoomService_StreamServer) error
	// 获取房间信息
	RoomInfo(context.Context, *RoomInfoArgs) (*RoomInfoRes, error)
}

func RegisterRoomServiceServer(s *grpc.Server, srv RoomServiceServer) {
	s.RegisterService(&_RoomService_serviceDesc, srv)
}

func _RoomService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RoomServiceServer).Stream(&roomServiceStreamServer{stream})
}

type RoomService_StreamServer interface {
	Send(*Room_Frame) error
	Recv() (*Room_Frame, error)
	grpc.ServerStream
}

type roomServiceStreamServer struct {
	grpc.ServerStream
}

func (x *roomServiceStreamServer) Send(m *Room_Frame) error {
	return x.ServerStream.SendMsg(m)
}

func (x *roomServiceStreamServer) Recv() (*Room_Frame, error) {
	m := new(Room_Frame)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RoomService_RoomInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomInfoArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).RoomInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoomService/RoomInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).RoomInfo(ctx, req.(*RoomInfoArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoomService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RoomService",
	HandlerType: (*RoomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RoomInfo",
			Handler:    _RoomService_RoomInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _RoomService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "room.proto",
}

func init() { proto1.RegisterFile("room.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0xca, 0xcf, 0xcf,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x4d, 0x8c, 0x5c, 0x2c, 0x41,
	0xf9, 0xf9, 0xb9, 0x52, 0x3e, 0x5c, 0xac, 0x6e, 0x45, 0x89, 0xb9, 0xa9, 0x42, 0x9a, 0x5c, 0x2c,
	0x21, 0x95, 0x05, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x7c, 0x46, 0xa2, 0x10, 0xe5, 0x7a, 0x20,
	0x35, 0x7a, 0x60, 0x05, 0x20, 0xc9, 0x20, 0xb0, 0x12, 0x21, 0x09, 0x2e, 0x76, 0xdf, 0xd4, 0xe2,
	0xe2, 0xc4, 0xf4, 0x54, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x9e, 0x20, 0x18, 0x57, 0x49, 0x87, 0x8b,
	0x13, 0xae, 0x58, 0x88, 0x83, 0x8b, 0x25, 0x20, 0x33, 0x2f, 0x5d, 0x80, 0x41, 0x88, 0x1b, 0xae,
	0x41, 0x80, 0x11, 0x24, 0xec, 0x9d, 0x99, 0x9c, 0x2d, 0xc0, 0xa4, 0xc4, 0xc7, 0xc5, 0x03, 0x32,
	0xdf, 0x33, 0x2f, 0x2d, 0xdf, 0xb1, 0x28, 0xbd, 0x58, 0x89, 0x97, 0x8b, 0x1b, 0xc6, 0x0f, 0x4a,
	0x2d, 0x36, 0xaa, 0x80, 0x70, 0x83, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0x8c, 0xb8, 0xd8,
	0x82, 0x4b, 0x8a, 0x52, 0x13, 0x73, 0x85, 0x04, 0x31, 0x1c, 0x27, 0x85, 0x29, 0xa4, 0xc1, 0x68,
	0xc0, 0x28, 0x64, 0xca, 0xc5, 0x01, 0x33, 0x51, 0x48, 0x18, 0x49, 0x09, 0xcc, 0x4a, 0x29, 0x21,
	0x34, 0xc1, 0xa0, 0xd4, 0x62, 0x25, 0x86, 0x24, 0x36, 0xb0, 0xa0, 0x31, 0x20, 0x00, 0x00, 0xff,
	0xff, 0x9e, 0xc9, 0x5b, 0x9e, 0x39, 0x01, 0x00, 0x00,
}
