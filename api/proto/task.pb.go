// Code generated by protoc-gen-go. DO NOT EDIT.
// source: task.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// message GameInfoArgs {
//    int32 room_id = 1; //房间场类型
//    int32 match_type = 2;  //赛事类型
//    int32 winner = 3; //胜者id
//    repeated TaskPlayerInfo players = 4;
//    int32 time = 5;  //时间戳
// }
//
// // 玩家信息
// message TaskPlayerInfo{
//    int32 id = 1; // 玩家id
//    int32 hand_level = 2;  // 牌型
//    int32 is_allin = 3; //是否全下0否1是
//    int32 all_bet = 4; //全部下注
// }
type TaskRes struct {
	Ret int32  `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	Msg string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *TaskRes) Reset()                    { *m = TaskRes{} }
func (m *TaskRes) String() string            { return proto1.CompactTextString(m) }
func (*TaskRes) ProtoMessage()               {}
func (*TaskRes) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *TaskRes) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *TaskRes) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type PlayerActionArgs struct {
	RoomId    int32 `protobuf:"varint,1,opt,name=room_id,json=roomId" json:"room_id,omitempty"`
	MatchType int32 `protobuf:"varint,2,opt,name=match_type,json=matchType" json:"match_type,omitempty"`
	Id        int32 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Type      int32 `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
	Time      int32 `protobuf:"varint,5,opt,name=time" json:"time,omitempty"`
}

func (m *PlayerActionArgs) Reset()                    { *m = PlayerActionArgs{} }
func (m *PlayerActionArgs) String() string            { return proto1.CompactTextString(m) }
func (*PlayerActionArgs) ProtoMessage()               {}
func (*PlayerActionArgs) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *PlayerActionArgs) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *PlayerActionArgs) GetMatchType() int32 {
	if m != nil {
		return m.MatchType
	}
	return 0
}

func (m *PlayerActionArgs) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PlayerActionArgs) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *PlayerActionArgs) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

type UpsetTaskArgs struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *UpsetTaskArgs) Reset()                    { *m = UpsetTaskArgs{} }
func (m *UpsetTaskArgs) String() string            { return proto1.CompactTextString(m) }
func (*UpsetTaskArgs) ProtoMessage()               {}
func (*UpsetTaskArgs) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *UpsetTaskArgs) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdateBagArgs struct {
	UserId  int32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	GoodsId int32 `protobuf:"varint,2,opt,name=goods_id,json=goodsId" json:"goods_id,omitempty"`
}

func (m *UpdateBagArgs) Reset()                    { *m = UpdateBagArgs{} }
func (m *UpdateBagArgs) String() string            { return proto1.CompactTextString(m) }
func (*UpdateBagArgs) ProtoMessage()               {}
func (*UpdateBagArgs) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *UpdateBagArgs) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateBagArgs) GetGoodsId() int32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func init() {
	proto1.RegisterType((*TaskRes)(nil), "proto.TaskRes")
	proto1.RegisterType((*PlayerActionArgs)(nil), "proto.PlayerActionArgs")
	proto1.RegisterType((*UpsetTaskArgs)(nil), "proto.UpsetTaskArgs")
	proto1.RegisterType((*UpdateBagArgs)(nil), "proto.UpdateBagArgs")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TaskService service

type TaskServiceClient interface {
	// 游戏结束后信息
	GameOver(ctx context.Context, in *GameTableInfoArgs, opts ...grpc.CallOption) (*TaskRes, error)
	//  玩家动作信息
	PlayerEvent(ctx context.Context, in *PlayerActionArgs, opts ...grpc.CallOption) (*TaskRes, error)
	// 更新任务
	UpsetTask(ctx context.Context, in *UpsetTaskArgs, opts ...grpc.CallOption) (*TaskRes, error)
	// 获得背包物品
	IncrUserBag(ctx context.Context, in *UpdateBagArgs, opts ...grpc.CallOption) (*TaskRes, error)
}

type taskServiceClient struct {
	cc *grpc.ClientConn
}

func NewTaskServiceClient(cc *grpc.ClientConn) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) GameOver(ctx context.Context, in *GameTableInfoArgs, opts ...grpc.CallOption) (*TaskRes, error) {
	out := new(TaskRes)
	err := grpc.Invoke(ctx, "/proto.TaskService/GameOver", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) PlayerEvent(ctx context.Context, in *PlayerActionArgs, opts ...grpc.CallOption) (*TaskRes, error) {
	out := new(TaskRes)
	err := grpc.Invoke(ctx, "/proto.TaskService/PlayerEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) UpsetTask(ctx context.Context, in *UpsetTaskArgs, opts ...grpc.CallOption) (*TaskRes, error) {
	out := new(TaskRes)
	err := grpc.Invoke(ctx, "/proto.TaskService/UpsetTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) IncrUserBag(ctx context.Context, in *UpdateBagArgs, opts ...grpc.CallOption) (*TaskRes, error) {
	out := new(TaskRes)
	err := grpc.Invoke(ctx, "/proto.TaskService/IncrUserBag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TaskService service

type TaskServiceServer interface {
	// 游戏结束后信息
	GameOver(context.Context, *GameTableInfoArgs) (*TaskRes, error)
	//  玩家动作信息
	PlayerEvent(context.Context, *PlayerActionArgs) (*TaskRes, error)
	// 更新任务
	UpsetTask(context.Context, *UpsetTaskArgs) (*TaskRes, error)
	// 获得背包物品
	IncrUserBag(context.Context, *UpdateBagArgs) (*TaskRes, error)
}

func RegisterTaskServiceServer(s *grpc.Server, srv TaskServiceServer) {
	s.RegisterService(&_TaskService_serviceDesc, srv)
}

func _TaskService_GameOver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameTableInfoArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GameOver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskService/GameOver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GameOver(ctx, req.(*GameTableInfoArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_PlayerEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerActionArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).PlayerEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskService/PlayerEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).PlayerEvent(ctx, req.(*PlayerActionArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_UpsetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsetTaskArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).UpsetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskService/UpsetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).UpsetTask(ctx, req.(*UpsetTaskArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_IncrUserBag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBagArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).IncrUserBag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskService/IncrUserBag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).IncrUserBag(ctx, req.(*UpdateBagArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GameOver",
			Handler:    _TaskService_GameOver_Handler,
		},
		{
			MethodName: "PlayerEvent",
			Handler:    _TaskService_PlayerEvent_Handler,
		},
		{
			MethodName: "UpsetTask",
			Handler:    _TaskService_UpsetTask_Handler,
		},
		{
			MethodName: "IncrUserBag",
			Handler:    _TaskService_IncrUserBag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task.proto",
}

func init() { proto1.RegisterFile("task.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x6b, 0xea, 0x40,
	0x10, 0xc6, 0x5f, 0xd4, 0xa8, 0x19, 0x79, 0x22, 0xc3, 0x03, 0xf3, 0x84, 0xc7, 0x93, 0x9c, 0xbc,
	0xd4, 0x43, 0xa5, 0xa5, 0x57, 0x2d, 0xa5, 0xe4, 0xd4, 0x92, 0xea, 0x59, 0xd6, 0xec, 0x34, 0x5d,
	0x34, 0xd9, 0xb0, 0xbb, 0x15, 0xbc, 0xf6, 0xdf, 0xed, 0x3f, 0x51, 0x76, 0x13, 0x8b, 0x6d, 0x3d,
	0x65, 0xe6, 0x37, 0xf3, 0x4d, 0xbe, 0xfd, 0x00, 0x0c, 0xd3, 0xdb, 0x69, 0xa9, 0xa4, 0x91, 0xe8,
	0xbb, 0xcf, 0x28, 0xd0, 0x46, 0x57, 0x24, 0xba, 0x80, 0xce, 0x92, 0xe9, 0x6d, 0x42, 0x1a, 0x07,
	0xd0, 0x54, 0x64, 0x42, 0x6f, 0xec, 0x4d, 0xfc, 0xc4, 0x96, 0x96, 0xe4, 0x3a, 0x0b, 0x1b, 0x63,
	0x6f, 0x12, 0x24, 0xb6, 0x8c, 0xde, 0x3c, 0x18, 0x3c, 0xee, 0xd8, 0x81, 0xd4, 0x3c, 0x35, 0x42,
	0x16, 0x73, 0x95, 0x69, 0x1c, 0x42, 0x47, 0x49, 0x99, 0xaf, 0x05, 0xaf, 0xc5, 0x6d, 0xdb, 0xc6,
	0x1c, 0xff, 0x01, 0xe4, 0xcc, 0xa4, 0x2f, 0x6b, 0x73, 0x28, 0xc9, 0x9d, 0xf1, 0x93, 0xc0, 0x91,
	0xe5, 0xa1, 0x24, 0xec, 0x43, 0x43, 0xf0, 0xb0, 0xe9, 0x70, 0x43, 0x70, 0x44, 0x68, 0xb9, 0xc5,
	0x96, 0x23, 0xae, 0x76, 0x4c, 0xe4, 0x14, 0xfa, 0x35, 0x13, 0x39, 0x45, 0xff, 0xe1, 0xf7, 0xaa,
	0xd4, 0x64, 0xac, 0x71, 0x67, 0xa0, 0x3a, 0xe4, 0x1d, 0x0f, 0x45, 0xb7, 0x76, 0x81, 0x33, 0x43,
	0x0b, 0x96, 0x1d, 0x1d, 0xbe, 0x6a, 0x52, 0x27, 0x0e, 0x6d, 0x1b, 0x73, 0xfc, 0x0b, 0xdd, 0x4c,
	0x4a, 0xae, 0xed, 0xa4, 0xf2, 0xd7, 0x71, 0x7d, 0xcc, 0x2f, 0xdf, 0x3d, 0xe8, 0xd9, 0x3f, 0x3c,
	0x91, 0xda, 0x8b, 0x94, 0xf0, 0x1a, 0xba, 0xf7, 0x2c, 0xa7, 0x87, 0x3d, 0x29, 0x0c, 0xab, 0xf4,
	0xa6, 0x16, 0x2c, 0xd9, 0x66, 0x47, 0x71, 0xf1, 0x2c, 0xed, 0x9f, 0x46, 0xfd, 0x7a, 0x52, 0x87,
	0x1a, 0xfd, 0xc2, 0x1b, 0xe8, 0x55, 0x89, 0xdd, 0xed, 0xa9, 0x30, 0x38, 0xac, 0x17, 0xbe, 0xa7,
	0x78, 0x46, 0x39, 0x83, 0xe0, 0xf3, 0x9d, 0xf8, 0xa7, 0x1e, 0x7f, 0x79, 0xf9, 0x19, 0xd1, 0x15,
	0xf4, 0xe2, 0x22, 0x55, 0x2b, 0x4d, 0x6a, 0xc1, 0xb2, 0x13, 0xd9, 0x49, 0x1e, 0x3f, 0x65, 0x9b,
	0xb6, 0x03, 0xb3, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd0, 0xc1, 0x2c, 0x74, 0x2e, 0x02, 0x00,
	0x00,
}
